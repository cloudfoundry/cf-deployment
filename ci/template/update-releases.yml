#@ load("@ytt:data", "data")

#@ load("bbl-down.lib.yml", "bbl_down")
#@ load("bbl-up.lib.yml", "bbl_up")
#@ load("delete-deployment.lib.yml", "delete_deployment")
#@ load("manage-gcp-dns.lib.yml", "manage_gcp_dns")
#@ load("update-release.lib.yml", "update_release")

#@ def collect_ops_files(release):
  #@ ops_files = "operations/scale-to-one-az.yml\noperations/use-compiled-releases.yml\noperations/experimental/use-compiled-releases-windows.yml\n"
  #@ additional_files = ""
  #@ if hasattr(release, "requiredOpsFiles"):
  #@ additional_files = "\n".join(release.requiredOpsFiles)
  #@ end
  #@ return ops_files + additional_files
#@ end

---
groups:
- name: update-linux-stemcell
  jobs:
  - detect-stemcell-bump
  - acquire-all-pre-dev-locks
  - update-stemcell-and-recompile-releases
  - acquire-pre-dev-lock-for-update-stemcell-minor
  - update-stemcell-minor
- name: update-base-releases
  jobs:
  #@ for r in data.values.baseReleases:
  - #@ "acquire-{}-pre-dev-lock".format(r.name)
  - #@ "update-" + r.name
  #@ end
- name: update-buildpack-releases
  jobs:
  #@ for r in data.values.buildpackReleases:
  - #@ "acquire-{}-pre-dev-lock".format(r.name)
  - #@ "update-" + r.name
  #@ end
- name: update-ops-releases
  jobs:
  #@ for r in data.values.opsReleases:
  - #@ "acquire-{}-pre-dev-lock".format(r.name)
  - #@ "update-" + r.name
  #@ end
  #@ for r in data.values.untestedOpsReleases:
  - #@ "update-" + r.name
  #@ end
- name: update-windows-stemcells-and-releases
  jobs:
  #@ for s in data.values.windowsStemcells:
  - #@ "update-" + s.name + "-stemcell"
  #@ end
  #@ for r in data.values.windowsOfflineReleases:
  - #@ "update-" + r.name + "-offline-release"
  #@ end
- name: debug
  jobs:
  #@ for r in data.values.baseReleases:
  #@ if hasattr(r, "debug"):
  - #@ "update-" + r.name
  - #@ "destroy-" + r.name + "-debug-env"
  #@ end
  #@ end
  #@ for r in data.values.buildpackReleases:
  #@ if hasattr(r, "debug"):
  - #@ "update-" + r.name
  - #@ "destroy-" + r.name + "-debug-env"
  #@ end
  #@ end
  #@ for r in data.values.opsReleases:
  #@ if hasattr(r, "debug"):
  - #@ "update-" + r.name
  - #@ "destroy-" + r.name + "-debug-env"
  #@ end
  #@ end
- name: cleanup
  jobs:
  - delete-stale-branches
- name: infrastructure
  jobs:
  - setup-infrastructure-compilation
  - destroy-infrastructure-compilation
  - run-bosh-cleanup-compilation

#! Combine all base releases for common handling
#@ combinedBaseReleases = data.values.baseReleases
#@ combinedBaseReleases.extend(data.values.buildpackReleases)

resource_types:
- name: stemcell-version-bump
  type: docker-image
  source:
    repository: cloudfoundry/stemcell-version-bump-resource

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: cf-deployment-all-branches
  type: git
  icon: github
  source:
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((ard_wg_gitbot_ssh_key.private_key))

- name: cf-deployment-develop
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((ard_wg_gitbot_ssh_key.private_key))

- name: cf-deployment-release-candidate
  type: git
  icon: github
  source:
    branch: release-candidate
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((ard_wg_gitbot_ssh_key.private_key))

- name: cf-deployment-main
  type: git  
  source:
    branch: main
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((ard_wg_gitbot_ssh_key.private_key))

- name: cf-deployment-version
  type: semver
  source:
    driver: git
    uri: git@github.com:cloudfoundry/cf-relint-ci-semver.git
    branch: main
    private_key: ((ard_wg_gitbot_ssh_key.private_key))
    file: cf-deployment-version

- name: cf-deployment-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: cf-deployment
    access_token: ((ard_wg_gitbot_token))

- name: cf-deployment-concourse-tasks
  type: git
  icon: github
  source:
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git

- name: relint-envs
  type: git
  icon: github
  source:
    branch: main
    uri: git@github.com:cloudfoundry/relint-envs.git
    private_key: ((ard_wg_gitbot_ssh_key.private_key))

- name: relint-team
  type: git
  icon: github
  source:
    branch: main
    uri: git@github.com:cloudfoundry/relint-team.git
    private_key: ((ard_wg_gitbot_ssh_key.private_key))

- name: runtime-ci
  type: git
  icon: github
  source:
    uri: https://github.com/cloudfoundry/runtime-ci.git

- name: stemcell
  type: bosh-io-stemcell
  icon: dna
  source:
    name: bosh-google-kvm-ubuntu-jammy-go_agent

- name: stemcell-version-bump-detect
  type: stemcell-version-bump
  icon: dna
  source:
    json_key: ((ci_dev_gcp_service_account_json))
    bucket_name: cf-deployment-stemcell-bump
    file_name: stemcell-version

- name: stemcell-version-bump-major
  type: stemcell-version-bump
  icon: dna
  source:
    json_key: ((ci_dev_gcp_service_account_json))
    bucket_name: cf-deployment-stemcell-bump
    file_name: stemcell-version
    type_filter: major

- name: stemcell-version-bump-minor
  type: stemcell-version-bump
  icon: dna
  source:
    json_key: ((ci_dev_gcp_service_account_json))
    bucket_name: cf-deployment-stemcell-bump
    file_name: stemcell-version
    type_filter: minor

#@ for r in data.values.windowsOfflineReleases:
- name: #@ r.name + "-offline-release"
  type: github-release
  icon: github
  source:
    owner: cloudfoundry
    repository: #@ r.name + "-release"
    access_token: ((release_integration_download_bot_access_token))
#@ end

#@ for r in combinedBaseReleases:
- name: #@ r.name + "-release"
  type: bosh-io-release
  source:
    repository: #@ r.repository
#@ end

#@ for r in data.values.opsReleases:
- name: #@ r.name + "-release"
  type: bosh-io-release
  source:
    repository: #@ r.repository
#@ end

#@ for r in data.values.untestedOpsReleases:
- name: #@ r.name + "-release"
  type: bosh-io-release
  source:
    repository: #@ r.repository
#@ end

#@ for r in combinedBaseReleases:
- name: #@ r.name + "-release-gcs"
  type: gcs-resource
  source:
    bucket: cf-deployment-compiled-releases
    json_key: ((ci_dev_gcp_service_account_json))
    regexp: #@ r.name + "-[^-]+-ubuntu-jammy-[^-]+-(\d+)-(\d+)-(\d+).*\.tgz"

- name: #@ r.name + "-component-bump-logs-gcs"
  type: gcs-resource
  source:
    bucket: component-bump-logs
    json_key: ((greengrass_gcp_service_account_json))
    regexp: #@ r.name + "/cf-(\d+)-(\d+)-(\d+)\.tgz"
#@ end

#@ for r in data.values.opsReleases:
- name: #@ r.name + "-component-bump-logs-gcs"
  type: gcs-resource
  source:
    bucket: component-bump-logs
    json_key: ((greengrass_gcp_service_account_json))
    regexp: #@ r.name + "/cf-(\d+)-(\d+)-(\d+)\.tgz"
#@ end

#@ for s in data.values.windowsStemcells:
- name: #@ s.name + "-stemcell"
  type: bosh-io-stemcell
  icon: dna
  source:
    name: #@ "bosh-google-kvm-" + s.name + "-go_agent"
#@ end

- name: slack-alert
  type: slack-notification
  icon: slack
  source:
    url: ((relint_slack_incoming_webhook))

- name: cf-d-slack-alert
  type: slack-notification
  icon: slack
  source:
    url: ((cf_deployment_slack_incoming_webhook))

- name: daily
  type: time
  icon: clock-outline
  source:
    start: 3:00 -0700
    stop: 3:30 -0700
    interval: 24h

- name: pre-dev-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: main
    pool: update-release-pool
    private_key: ((ard_wg_gitbot_ssh_key.private_key))

#@ for e in data.values.preDevEnvs:
- name: #@ "pre-dev-" + e.name
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: main
    pool: update-release-pool
    private_key: ((ard_wg_gitbot_ssh_key.private_key))
#@ end

jobs:
#@ for r in combinedBaseReleases:
#@ if hasattr(r, "debug"):
  #@ env = "pre-dev-debug"
#@ else:
  #@ env = "pre-dev"
#@ end
- name: #@ "acquire-{}-pre-dev-lock".format(r.name)
  public: true
  plan:
  - in_parallel:
    - get: #@ r.name + "-release"
      trigger: true
      params:
        tarball: false
  - put: pre-dev-pool
    params: {acquire: true}

- name: #@ "update-" + r.name
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: pre-dev-pool
      passed:
      - #@ "acquire-{}-pre-dev-lock".format(r.name)
      trigger: true
    - get: #@ r.name + "-release"
      params:
        tarball: false
      passed:
      - #@ "acquire-{}-pre-dev-lock".format(r.name)
    - get: cf-deployment-release-candidate
    - get: cf-deployment-develop
    - get: stemcell
      params:
        tarball: false
      passed:
      - update-stemcell-and-recompile-releases
    - get: cf-deployment-concourse-tasks
    - get: runtime-ci
    - get: relint-envs
    - get: relint-team
  - #@ update_release(r, "manifest", "release-candidate")
  - #@ update_release(r, "opsfile", "release-candidate", True)
  - do:
    - #@ bbl_up(env)
    - #@ manage_gcp_dns("add", env)
    - do:
      - task: combine-vars-files
        file: runtime-ci/tasks/combine-inputs/task.yml
        input_mapping:
          first-input: cf-deployment-release-candidate
          second-input: relint-envs
        output_mapping:
          combined-inputs: combined-vars-files
      - task: update-stemcell-for-deploy
        file: runtime-ci/tasks/update-base-manifest-stemcell/task.yml
        input_mapping:
          cf-deployment: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
        output_mapping:
          updated-cf-deployment: #@ "updated-cf-deployment-{}-release-candidate-with-stemcell".format(r.name)
      - task: deploy-cf
        file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
        input_mapping:
          bbl-state: relint-envs
          cf-deployment: #@ "updated-cf-deployment-{}-release-candidate-with-stemcell".format(r.name)
          ops-files: #@ "updated-cf-deployment-{}-release-candidate-with-stemcell".format(r.name)
          vars-files: combined-vars-files
          pool-lock: pre-dev-pool
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
          OPS_FILES: |
            operations/scale-to-one-az.yml
          REGENERATE_CREDENTIALS: false
          BOSH_DEPLOY_ARGS: "--parallel 50"
      - task: ensure-api-healthy
        file: runtime-ci/tasks/ensure-api-healthy/task.yml
        input_mapping:
          pool-lock: pre-dev-pool
          cats-integration-config: relint-envs
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
      - task: run-errand-smoke-tests
        file: cf-deployment-concourse-tasks/run-errand/task.yml
        input_mapping:
          bbl-state: relint-envs
          pool-lock: pre-dev-pool
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
          ERRAND_NAME: smoke_tests
      - task: #@ "export-compiled-release-" + r.name
        file: runtime-ci/tasks/export-compiled-release-tarball/task.yml
        input_mapping:
          bbl-state: relint-envs
          manifest: #@ "updated-cf-deployment-{}-release-candidate-with-stemcell".format(r.name)
          pool-lock: pre-dev-pool
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
          RELEASE_NAME: #@ r.name
      on_success:
        do:
        - #@ update_release(r, "manifest", "develop")
        - #@ update_release(r, "opsfile", "develop", True)
        - task: #@ "update-compiled-releases-ops-file-{}-develop".format(r.name)
          file: runtime-ci/tasks/update-single-compiled-release/task.yml
          input_mapping:
            original-compiled-releases-ops-file: #@ "updated-cf-deployment-{}-develop".format(r.name)
            release: #@ r.name + "-release"
          output_mapping:
            updated-compiled-releases-ops-file: #@ "updated-cf-deployment-{}-develop".format(r.name)
          params:
            RELEASE_NAME: #@ r.name
            ORIGINAL_OPS_FILE_PATH: operations/use-compiled-releases.yml
            UPDATED_OPS_FILE_PATH: operations/use-compiled-releases.yml
        - put: #@ r.name + "-release-gcs"
          params:
            file: compiled-release-tarball/*.tgz
            predefined_acl: publicRead
        - put: cf-deployment-develop
          params:
            rebase: true
            repository: #@ "updated-cf-deployment-{}-develop".format(r.name)
      on_failure:
        do:
        - task: push-to-release-branch
          file: runtime-ci/tasks/push-to-release-branch/task.yml
          input_mapping:
            updated-cf-deployment: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
            release: #@ r.name + "-release"
          params:
            DEPLOY_KEY: ((ard_wg_gitbot_ssh_key.private_key))
            RELEASE_NAME: #@ r.name
        - task: retrieve-bosh-logs
          file: runtime-ci/tasks/retrieve-bosh-logs/task.yml
          input_mapping:
            bbl-state: relint-envs
            pool-lock: pre-dev-pool
          params:
            BBL_JSON_CONFIG: pool-lock/metadata
        - put: #@ r.name + "-component-bump-logs-gcs"
          params:
            file: bosh-logs/cf-*.tgz
        ensure:
          do:
          - task: create-slack-message
            file: runtime-ci/tasks/create-slack-message/task.yml
            input_mapping:
              release: #@ r.name + "-release"
            params:
              BOSH_LOGS_PREFIX: #@ "https://storage.cloud.google.com/component-bump-logs/" + r.name
              RELEASE_NAME: #@ r.name
          - task: lookup-slack-channel-for-release-owner
            file: runtime-ci/tasks/lookup-slack-channel-for-release-owner/task.yml
            params:
              RELEASE_REPOSITORY: #@ r.repository
          - put: slack-alert
            params:
              channel_file: slack-channel/channel.txt
              icon_emoji: ":cloudfoundrylogo:"
              text: |
                $TEXT_FILE_CONTENT

                CI job: https://concourse.wg-ard.ci.cloudfoundry.org/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

                If you're unfamiliar with the update-release pre-validation, please review the following FAQ: https://docs.google.com/document/d/1dUIk2HWbUzdxWs-pNZ-cCqH7CuSNDBixIUoXIFkFpz0
              text_file: slack-message/message.txt
              username: "Release Integration"
    #@ if hasattr(r, "debug") == False:
      ensure:
        do:
        - #@ delete_deployment(env)
        - #@ manage_gcp_dns("remove", env)
        - #@ bbl_down(env)
    ensure:
      do:
      - put: pre-dev-pool
        params: {release: pre-dev-pool}
    #@ end

#@ if hasattr(r, "debug"):
- name: #@ "destroy-" + r.name + "-debug-env"
  public: true
  plan:
  - in_parallel:
    - get: cf-deployment-concourse-tasks
    - get: runtime-ci
    - get: relint-envs
  - #@ delete_deployment(env)
  - #@ manage_gcp_dns("remove", env)
  - #@ bbl_down(env)
  - put: pre-dev-pool
    params: {release: pre-dev-pool}
    passed:
    - #@ "update-" + r.name
#@ end
#@ end

#@ for r in data.values.opsReleases:
#@ if hasattr(r, "debug"):
  #@ env = "pre-dev-debug"
#@ else:
  #@ env = "pre-dev"
#@ end
- name: #@ "acquire-{}-pre-dev-lock".format(r.name)
  public: true
  plan:
  - in_parallel:
    - get: #@ r.name + "-release"
      trigger: true
      params:
        tarball: false
  - put: pre-dev-pool
    params: {acquire: true}

- name: #@ "update-" + r.name
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: pre-dev-pool
      passed:
      - #@ "acquire-{}-pre-dev-lock".format(r.name)
      trigger: true
    - get: #@ r.name + "-release"
      params:
        tarball: false
      passed:
      - #@ "acquire-{}-pre-dev-lock".format(r.name)
    - get: cf-deployment-release-candidate
    - get: cf-deployment-develop
    - get: stemcell
      params:
        tarball: false
    - get: cf-deployment-concourse-tasks
    - get: runtime-ci
    - get: relint-envs
    - get: relint-team
  - #@ update_release(r, "opsfile", "release-candidate")
  - do:
    - #@ bbl_up(env)
    - #@ manage_gcp_dns("add", env)
    - do:
      - task: combine-vars-files
        file: runtime-ci/tasks/combine-inputs/task.yml
        input_mapping:
          first-input: cf-deployment-release-candidate
          second-input: relint-envs
        output_mapping:
          combined-inputs: combined-vars-files
      - task: deploy-cf
        file: runtime-ci/tasks/bosh-deploy-with-first-ops/task.yml
        input_mapping:
          bbl-state: relint-envs
          cf-deployment: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
          ops-files: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
          vars-files: combined-vars-files
          pool-lock: pre-dev-pool
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
          OPS_FILES: #@ collect_ops_files(r)
          REGENERATE_CREDENTIALS: false
          BOSH_DEPLOY_ARGS: "--parallel 50"
          #@ if hasattr(r, "varsFiles"):
          VARS_FILES: #@ r.varsFiles
          #@ end
          #@ if hasattr(r, "prependOpsFileToList"):
          PREPEND_OPS_FILE_TO_LIST: true
          #@ end
      #@ if hasattr(r, "skipSmokeTests") == False:
      - task: ensure-api-healthy
        file: runtime-ci/tasks/ensure-api-healthy/task.yml
        input_mapping:
          cats-integration-config: relint-envs
          pool-lock: pre-dev-pool
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
      - task: run-errand-smoke-tests
        file: cf-deployment-concourse-tasks/run-errand/task.yml
        input_mapping:
          bbl-state: relint-envs
          pool-lock: pre-dev-pool
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
          ERRAND_NAME: smoke_tests
      #@ end
      on_success:
        do:
        - #@ update_release(r, "opsfile", "develop")
        - put: cf-deployment-develop
          params:
            rebase: true
            repository: #@ "updated-cf-deployment-{}-develop".format(r.name)
      on_failure:
        do:
        - task: push-to-release-branch
          file: runtime-ci/tasks/push-to-release-branch/task.yml
          input_mapping:
            updated-cf-deployment: #@ "updated-cf-deployment-{}-release-candidate".format(r.name)
            release: #@ r.name + "-release"
          params:
            DEPLOY_KEY: ((ard_wg_gitbot_ssh_key.private_key))
            RELEASE_NAME: #@ r.name
        - task: retrieve-bosh-logs
          file: runtime-ci/tasks/retrieve-bosh-logs/task.yml
          input_mapping:
            bbl-state: relint-envs
            pool-lock: pre-dev-pool
          params:
            BBL_JSON_CONFIG: pool-lock/metadata
        - put: #@ r.name + "-component-bump-logs-gcs"
          params:
            file: bosh-logs/cf-*.tgz
        ensure:
          do:
          - task: create-slack-message
            file: runtime-ci/tasks/create-slack-message/task.yml
            input_mapping:
              release: #@ r.name + "-release"
            params:
              BOSH_LOGS_PREFIX: #@ "https://storage.cloud.google.com/component-bump-logs/" + r.name
              RELEASE_NAME: #@ r.name
          - task: lookup-slack-channel-for-release-owner
            file: runtime-ci/tasks/lookup-slack-channel-for-release-owner/task.yml
            params:
              RELEASE_REPOSITORY: #@ r.repository
          - put: slack-alert
            params:
              channel_file: slack-channel/channel.txt
              icon_emoji: ":cloudfoundrylogo:"
              text: |
                $TEXT_FILE_CONTENT

                CI job: https://concourse.wg-ard.ci.cloudfoundry.org/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

                If you're unfamiliar with the update-release pre-validation, please review the following FAQ: https://docs.google.com/document/d/1dUIk2HWbUzdxWs-pNZ-cCqH7CuSNDBixIUoXIFkFpz0
              text_file: slack-message/message.txt
              username: "Release Integration"
    #@ if hasattr(r, "debug") == False:
      ensure:
        do:
        - #@ delete_deployment(env)
        - #@ manage_gcp_dns("remove", env)
        - #@ bbl_down(env)
    ensure:
      do:
      - put: pre-dev-pool
        params: {release: pre-dev-pool}
    #@ end

#@ if hasattr(r, "debug"):
- name: #@ "destroy-" + r.name + "-debug-env"
  public: true
  plan:
  - in_parallel:
    - get: cf-deployment-concourse-tasks
    - get: runtime-ci
    - get: relint-envs
  - #@ delete_deployment(env)
  - #@ manage_gcp_dns("remove", env)
  - #@ bbl_down(env)
  - put: pre-dev-pool
    params: {release: pre-dev-pool}
    passed:
    - #@ "update-" + r.name
#@ end
#@ end

#@ for r in data.values.untestedOpsReleases:
- name: #@ "update-" + r.name
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: #@ r.name + "-release"
      trigger: true
      params:
        tarball: false
    - get: cf-deployment-develop
    - get: runtime-ci
  - #@ update_release(r, "opsfile", "develop")
  - put: cf-deployment-develop
    params:
      rebase: true
      repository: #@ "updated-cf-deployment-{}-develop".format(r.name)
#@ end

#@ for s in data.values.windowsStemcells:
- name: #@ "update-" + s.name + "-stemcell"
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: runtime-ci
    - get: cf-deployment-develop
    - get: #@ s.name + "-stemcell"
      trigger: true
      params:
        tarball: false
  - task: update-windows-stemcell-ops
    file: runtime-ci/tasks/update-windows-stemcell-ops/task.yml
    input_mapping:
      ops-files: cf-deployment-develop
      windows-stemcell: #@ s.name + "-stemcell"
    params:
      ORIGINAL_WINDOWS_OPS_FILE_PATH: #@ "{}/{}".format(s.opsFileDir, s.opsFile)
      UPDATED_WINDOWS_OPS_FILE_PATH: #@ "{}/{}".format(s.opsFileDir, s.opsFile)
  - put: cf-deployment-develop
    params:
      rebase: true
      repository: updated-stemcell-ops-file
#@ end

- name: detect-stemcell-bump
  plan:
  - in_parallel:
    - get: stemcell
      trigger: true
    - get: cf-deployment-main
    - get: runtime-ci
  - task: detect-stemcell-bump
    file: runtime-ci/tasks/detect-stemcell-bump/task.yml
    input_mapping:
      cf-deployment: cf-deployment-main
  - put: stemcell-version-bump-detect
    params:
      type_file: stemcell-bump-type/result
      version_file: stemcell/version

- name: acquire-all-pre-dev-locks
  public: true
  plan:
  - in_parallel:
    - get: stemcell-version-bump-major
      trigger: true
    - get: stemcell
      passed:
      - detect-stemcell-bump
      params:
        tarball: false
  - in_parallel:
    #@ for e in data.values.preDevEnvs:
    - put: #@ "pre-dev-" + e.name
      params:
        claim: #@ "pre-dev-" + e.name
    #@ end
  - put: slack-alert
    params:
      icon_emoji: ":cloudfoundrylogo:"
      text: |
        Starting to bump to new major stemcell: $TEXT_FILE_CONTENT
      text_file: stemcell/version
      username: "Release Integration"

- name: update-stemcell-and-recompile-releases
  public: true
  serial: true
  plan:
  - do:
    - in_parallel:
      - get: runtime-ci
      - get: relint-envs
      - get: cf-deployment-develop
      - get: cf-deployment-concourse-tasks
      - get: stemcell
        params:
          tarball: false
        passed:
        - acquire-all-pre-dev-locks
    #@ for e in data.values.preDevEnvs:
      - get: #@ "pre-dev-" + e.name
        passed:
        - acquire-all-pre-dev-locks
        trigger: true
    #@ end
    - do:
      - task: upload-stemcell
        file: runtime-ci/tasks/bosh-upload-stemcell/task.yml
        input_mapping:
          bbl-state: relint-envs
        params:
          BBL_STATE_DIR: environments/test/greengrass/bbl-state
      - task: guarantee-no-existing-deployments
        file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
        input_mapping:
          bbl-state: relint-envs
        params:
          BBL_STATE_DIR: environments/test/greengrass/bbl-state
          DELETE_ALL_DEPLOYMENTS: true
          IGNORE_ERRORS: true
        attempts: 3
      - task: deploy-all-releases
        file: runtime-ci/tasks/deploy-all-releases/task.yml
        input_mapping:
          bbl-state: relint-envs
          cf-deployment: cf-deployment-develop
        params:
          BBL_STATE_DIR: environments/test/greengrass/bbl-state
      - task: export-all-compiled-release-tarballs
        file: runtime-ci/tasks/export-all-compiled-release-tarballs/task.yml
        input_mapping:
          bbl-state: relint-envs
        params:
          BBL_STATE_DIR: environments/test/greengrass/bbl-state
          BOSH_DEPLOYMENT: cf-compilation
      ensure:
        do:
        - task: delete-all-deployments
          file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
          input_mapping:
            bbl-state: relint-envs
          params:
            BBL_STATE_DIR: environments/test/greengrass/bbl-state
            DELETE_ALL_DEPLOYMENTS: true
            IGNORE_ERRORS: true
          attempts: 3
        - task: run-bosh-cleanup
          file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
          input_mapping:
            bbl-state: relint-envs
          params:
            BBL_STATE_DIR: environments/test/greengrass/bbl-state
    - task: update-stemcell
      file: runtime-ci/tasks/update-stemcell/task.yml
      input_mapping:
        cf-deployment: cf-deployment-develop
    - in_parallel:
      #@ for r in combinedBaseReleases:
      - put: #@ r.name + "-release-gcs"
        params:
          file: #@ "compiled-releases/" + r.name + "-[0-9]*.tgz"
          predefined_acl: publicRead
        get_params:
          skip_download: "true"
        attempts: 3
      #@ end
    - put: cf-deployment-develop
      params:
        rebase: true
        repository: updated-cf-deployment
    ensure:
      in_parallel:
      #@ for e in data.values.preDevEnvs:
      - put: #@ "pre-dev-" + e.name
        params:
          release: #@ "pre-dev-" + e.name
      #@ end

- name: acquire-pre-dev-lock-for-update-stemcell-minor
  public: true
  plan:
  - get: stemcell-version-bump-minor
    trigger: true
  - get: stemcell
    passed:
    - detect-stemcell-bump
    params:
      tarball: false
  - put: pre-dev-pool
    params: {acquire: true}
  - put: slack-alert
    params:
      icon_emoji: ":cloudfoundrylogo:"
      text: |
        Starting to bump to new minor stemcell: $TEXT_FILE_CONTENT
      text_file: stemcell/version
      username: "Release Integration"

#@ env = "pre-dev"
- name: update-stemcell-minor
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: pre-dev-pool
      passed:
      - acquire-pre-dev-lock-for-update-stemcell-minor
      trigger: true
    - get: cf-deployment-concourse-tasks
    - get: cf-deployment-main
    - get: relint-envs
    - get: runtime-ci
    - get: stemcell
      params:
        tarball: false
      passed:
      - acquire-pre-dev-lock-for-update-stemcell-minor
    - get: cf-deployment-version
      params: {bump: minor}
  - task: update-stemcell-minor
    file: runtime-ci/tasks/update-base-manifest-stemcell/task.yml
    input_mapping:
      cf-deployment: cf-deployment-main
    output_mapping:
      updated-cf-deployment: updated-cf-deployment-main
  - do:
    - #@ bbl_up(env)
    - do:
      - #@ manage_gcp_dns("add", env)
      - task: combine-vars-files
        file: runtime-ci/tasks/combine-inputs/task.yml
        input_mapping:
          first-input: cf-deployment-main
          second-input: relint-envs
        output_mapping:
          combined-inputs: combined-vars-files
      - task: deploy-cf
        file: cf-deployment-concourse-tasks/bosh-deploy/task.yml
        input_mapping:
          bbl-state: relint-envs
          cf-deployment: updated-cf-deployment-main
          ops-files: updated-cf-deployment-main
          vars-files: combined-vars-files
          pool-lock: pre-dev-pool
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
          OPS_FILES: |
            operations/scale-to-one-az.yml
            operations/use-compiled-releases.yml
          REGENERATE_CREDENTIALS: false
          BOSH_DEPLOY_ARGS: "--parallel 50"
      - task: ensure-api-healthy
        file: runtime-ci/tasks/ensure-api-healthy/task.yml
        input_mapping:
          pool-lock: pre-dev-pool
          cats-integration-config: relint-envs
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
      - task: run-errand-smoke-tests
        file: cf-deployment-concourse-tasks/run-errand/task.yml
        input_mapping:
          bbl-state: relint-envs
          pool-lock: pre-dev-pool
        params:
          BBL_JSON_CONFIG: pool-lock/metadata
          ERRAND_NAME: smoke_tests
      - task: generate-cf-deployment-release-notes-template
        file: runtime-ci/tasks/cf-deployment-minor-stemcell-bump-release-notes/task.yml
        input_mapping:
          release-version: cf-deployment-version
      - task: update-cf-deployment-manifest-version
        file: runtime-ci/tasks/record-cfd-version-in-manifest/task.yml
        input_mapping:
          cf-deployment-release-candidate: updated-cf-deployment-main
        output_mapping:
          cf-deployment-rc-with-updated-version: cf-deployment-main-with-updated-manifest-version
      - put: cf-deployment-main
        params:
          repository: cf-deployment-main-with-updated-manifest-version
          tag: cf-deployment-version/version
          tag_prefix: v
      - put: cf-deployment-release
        params:
          name: cf-deployment-minor-stemcell-bump-release-notes/name.txt
          tag: cf-deployment-version/version
          tag_prefix: v
          body: cf-deployment-minor-stemcell-bump-release-notes/body.txt
      - put: cf-deployment-version
        params: {bump: minor}
      - put: cf-deployment-develop
        params:
          repository: cf-deployment-main-with-updated-manifest-version
          merge: true
      - put: cf-d-slack-alert
        params:
          icon_emoji: ":cloudfoundrylogo:"
          text: |
            Releasing new minor stemcell bump in v$TEXT_FILE_CONTENT of cf-deployment

            https://github.com/cloudfoundry/cf-deployment/releases/tag/v$TEXT_FILE_CONTENT
          text_file: cf-deployment-version/version
          username: "Release Integration"
      ensure:
        do:
        - #@ delete_deployment(env)
        - #@ manage_gcp_dns("remove", env)
        - #@ bbl_down(env)
    ensure:
      do:
      - put: pre-dev-pool
        params: {release: pre-dev-pool}

#@ for r in data.values.windowsOfflineReleases:
- name: #@ "update-" + r.name + "-offline-release"
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: runtime-ci
    - get: relint-envs
    - get: cf-deployment-develop
    - get: cf-deployment-concourse-tasks
      params:
        tarball: false
    - get: #@ r.name + "-offline-release"
      trigger: true
      params:
        tarball: false
    - get: #@ r.stemcell
  - task: update-windows-releases
    file: runtime-ci/tasks/update-single-opsfile-release/task.yml
    input_mapping:
      original-ops-file: cf-deployment-develop
      release: #@ r.name + "-offline-release"
    params:
      RELEASE_NAME: #@ r.name
      ORIGINAL_OPS_FILE_PATH: #@ "{}/{}".format(r.opsFileDir, r.opsFile)
      UPDATED_OPS_FILE_PATH: #@ "{}/{}".format(r.opsFileDir, r.opsFile)
  - put: cf-deployment-develop
    params:
      rebase: true
      repository: updated-ops-file
#@ end

- name: delete-stale-branches
  public: true
  plan:
  - in_parallel:
    - get: cf-deployment-all-branches
    - get: runtime-ci
    - get: daily
      trigger: true
  - task: delete-stale-branches
    file: runtime-ci/tasks/validate-branch-freshness/task.yml
    input_mapping:
      repo: cf-deployment-all-branches
    params:
      BRANCH_REGEXP: "update-.*-release-.*"
      MONTHS: 1
      DELETE_STALE_BRANCHES: true
      DEPLOY_KEY: ((ard_wg_gitbot_ssh_key.private_key))

- name: setup-infrastructure-compilation
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-deployment-concourse-tasks
    - get: runtime-ci
    - get: relint-envs
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      BBL_CONFIG_DIR: environments/test/greengrass/bbl-config
      BBL_IAAS: gcp
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((greengrass_gcp_service_account_json))
      BBL_GCP_REGION: europe-west3
      BBL_ENV_NAME: greengrass-compile
      GIT_COMMIT_EMAIL: "app-deployments@cloudfoundry.org"
      GIT_COMMIT_USERNAME: "ARD WG Bot"
      SKIP_LB_CREATION: true
    input_mapping:
      bbl-state: relint-envs
      bbl-config: relint-envs
    ensure:
      put: relint-envs
      params:
        repository: updated-bbl-state
        rebase: true
  - task: extend-cloud-config-for-credhub-dry-run
    file: runtime-ci/tasks/bosh-extend-cloud-config/task.yml
    input_mapping:
      ops-file: relint-envs
      bbl-state: relint-envs
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      OPS_FILE_PATH: environments/test/greengrass/add-credhub-lb.yml

- name: destroy-infrastructure-compilation
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: relint-envs
    - get: runtime-ci
    - get: cf-deployment-concourse-tasks
  - task: guarantee-no-existing-cf-deployment
    file: cf-deployment-concourse-tasks/bosh-delete-deployment/task.yml
    input_mapping:
      bbl-state: relint-envs
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
  - task: destroy-infrastructure
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    input_mapping:
      bbl-state: relint-envs
    params:
      BBL_STATE_DIR: environments/test/greengrass/bbl-state
      BBL_GCP_SERVICE_ACCOUNT_KEY: ((greengrass_gcp_service_account_json))
      GIT_COMMIT_EMAIL: "app-deployments@cloudfoundry.org"
      GIT_COMMIT_USERNAME: "ARD WG Bot"
    ensure:
      put: relint-envs
      params:
        repository: updated-bbl-state
        rebase: true

- name: run-bosh-cleanup-compilation
  serial: true
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: cf-deployment-concourse-tasks
      - get: cf-deployment-develop
      - get: relint-envs
      - get: daily
        trigger: true
    - task: run-bosh-cleanup
      file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
      input_mapping:
        bbl-state: relint-envs
      params:
        BBL_STATE_DIR: environments/test/greengrass/bbl-state
    - task: upload-stemcell
      file: cf-deployment-concourse-tasks/bosh-upload-stemcells/task.yml
      input_mapping:
        bbl-state: relint-envs
        cf-deployment: cf-deployment-develop
        ops-files: cf-deployment-develop
      params:
        BBL_STATE_DIR: environments/test/greengrass/bbl-state
        INFRASTRUCTURE: google
        OPS_FILES: |
          operations/windows2019-cell.yml
    - task: upload-bosh-dns-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cloudfoundry/cf-deployment-concourse-tasks
            tag: latest
        inputs:
        - name: relint-envs
        run:
          path: /bin/bash
          args:
          - -c
          - |
            #!/bin/bash
            cd relint-envs/environments/test/greengrass/bbl-state
            eval "$(bbl print-env)"
            bosh upload-release $(bosh int <(bosh runtime-config --name=dns) --path /releases/name=bosh-dns/url)
